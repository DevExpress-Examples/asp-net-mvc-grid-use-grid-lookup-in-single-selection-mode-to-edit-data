'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
	Imports System.Data.Linq
	Imports System.Data.Linq.Mapping
	Imports System.Data
	Imports System.Collections.Generic
	Imports System.Reflection
	Imports System.Linq
	Imports System.Linq.Expressions
	Imports System.ComponentModel
	Imports System
	Imports System.ComponentModel.DataAnnotations
Namespace E2979DVC.Models


	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name := "NWind")> _
	Partial Public Class NorthwindDataContext
		Inherits System.Data.Linq.DataContext

		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

		#Region "Extensibility Method Definitions"
		Partial Private Sub OnCreated()
		End Sub
		Partial Private Sub InsertCategory(ByVal instance As Category)
		End Sub
		Partial Private Sub UpdateCategory(ByVal instance As Category)
		End Sub
		Partial Private Sub DeleteCategory(ByVal instance As Category)
		End Sub
		Partial Private Sub InsertProduct(ByVal instance As Product)
		End Sub
		Partial Private Sub UpdateProduct(ByVal instance As Product)
		End Sub
		Partial Private Sub DeleteProduct(ByVal instance As Product)
		End Sub
		#End Region

		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("NWindConnectionString").ConnectionString, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Category)
			Get
				Return Me.GetTable(Of Category)()
			End Get
		End Property

		Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
			Get
				Return Me.GetTable(Of Product)()
			End Get
		End Property
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name := "dbo.Categories")> _
	Partial Public Class Category
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _CategoryID As Integer

		Private _CategoryName As String

		Private _Description As String

		Private _Picture As System.Data.Linq.Binary

		#Region "Extensibility Method Definitions"
		Partial Private Sub OnLoaded()
		End Sub
		Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
		End Sub
		Partial Private Sub OnCreated()
		End Sub
		Partial Private Sub OnCategoryIDChanging(ByVal value As Integer)
		End Sub
		Partial Private Sub OnCategoryIDChanged()
		End Sub
		Partial Private Sub OnCategoryNameChanging(ByVal value As String)
		End Sub
		Partial Private Sub OnCategoryNameChanged()
		End Sub
		Partial Private Sub OnDescriptionChanging(ByVal value As String)
		End Sub
		Partial Private Sub OnDescriptionChanged()
		End Sub
		Partial Private Sub OnPictureChanging(ByVal value As System.Data.Linq.Binary)
		End Sub
		Partial Private Sub OnPictureChanged()
		End Sub
		#End Region

		Public Sub New()
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_CategoryID", DbType := "Int NOT NULL", IsPrimaryKey := True)> _
		Public Property CategoryID() As Integer
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value As Integer)
				If (Me._CategoryID <> value) Then
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_CategoryName", DbType := "NVarChar(15) NOT NULL", CanBeNull := False)> _
		Public Property CategoryName() As String
			Get
				Return Me._CategoryName
			End Get
			Set(ByVal value As String)
				If (Me._CategoryName <> value) Then
					Me.OnCategoryNameChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryName = value
					Me.SendPropertyChanged("CategoryName")
					Me.OnCategoryNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_Description", DbType := "NText", UpdateCheck := UpdateCheck.Never)> _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set(ByVal value As String)
				If (Me._Description <> value) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging()
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_Picture", DbType := "Image", UpdateCheck := UpdateCheck.Never)> _
		Public Property Picture() As System.Data.Linq.Binary
			Get
				Return Me._Picture
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._Picture IsNot value) Then
					Me.OnPictureChanging(value)
					Me.SendPropertyChanging()
					Me._Picture = value
					Me.SendPropertyChanged("Picture")
					Me.OnPictureChanged()
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name := "dbo.Products")> _
	Partial Public Class Product
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ProductID As Integer

		Private _ProductName As String

		Private _SupplierID? As Integer

		Private _CategoryID? As Integer

		Private _QuantityPerUnit As String

		Private _UnitPrice? As Decimal

		Private _UnitsInStock? As Short

		Private _UnitsOnOrder? As Short

		Private _ReorderLevel? As Short

		Private _Discontinued As Boolean

		Private _EAN13 As String

		#Region "Extensibility Method Definitions"
		Partial Private Sub OnLoaded()
		End Sub
		Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
		End Sub
		Partial Private Sub OnCreated()
		End Sub
		Partial Private Sub OnProductIDChanging(ByVal value As Integer)
		End Sub
		Partial Private Sub OnProductIDChanged()
		End Sub
		Partial Private Sub OnProductNameChanging(ByVal value As String)
		End Sub
		Partial Private Sub OnProductNameChanged()
		End Sub
		Partial Private Sub OnSupplierIDChanging(ByVal value? As Integer)
		End Sub
		Partial Private Sub OnSupplierIDChanged()
		End Sub
		Partial Private Sub OnCategoryIDChanging(ByVal value? As Integer)
		End Sub
		Partial Private Sub OnCategoryIDChanged()
		End Sub
		Partial Private Sub OnQuantityPerUnitChanging(ByVal value As String)
		End Sub
		Partial Private Sub OnQuantityPerUnitChanged()
		End Sub
		Partial Private Sub OnUnitPriceChanging(ByVal value? As Decimal)
		End Sub
		Partial Private Sub OnUnitPriceChanged()
		End Sub
		Partial Private Sub OnUnitsInStockChanging(ByVal value? As Short)
		End Sub
		Partial Private Sub OnUnitsInStockChanged()
		End Sub
		Partial Private Sub OnUnitsOnOrderChanging(ByVal value? As Short)
		End Sub
		Partial Private Sub OnUnitsOnOrderChanged()
		End Sub
		Partial Private Sub OnReorderLevelChanging(ByVal value? As Short)
		End Sub
		Partial Private Sub OnReorderLevelChanged()
		End Sub
		Partial Private Sub OnDiscontinuedChanging(ByVal value As Boolean)
		End Sub
		Partial Private Sub OnDiscontinuedChanged()
		End Sub
		Partial Private Sub OnEAN13Changing(ByVal value As String)
		End Sub
		Partial Private Sub OnEAN13Changed()
		End Sub
		#End Region

		Public Sub New()
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_ProductID", DbType := "Int NOT NULL", IsPrimaryKey := True)> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_ProductName", DbType := "NVarChar(40) NOT NULL", CanBeNull := False), Required(ErrorMessage := "Name is required")> _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me.OnProductNameChanging(value)
					Me.SendPropertyChanging()
					Me._ProductName = value
					Me.SendPropertyChanged("ProductName")
					Me.OnProductNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_SupplierID", DbType := "Int")> _
		Public Property SupplierID() As Integer?
			Get
				Return Me._SupplierID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._SupplierID.Equals(value)) Then
					Me.OnSupplierIDChanging(value)
					Me.SendPropertyChanging()
					Me._SupplierID = value
					Me.SendPropertyChanged("SupplierID")
					Me.OnSupplierIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_CategoryID", DbType := "Int"), Required(ErrorMessage := "Category is required")> _
		Public Property CategoryID() As Integer?
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._CategoryID.Equals(value)) Then
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_QuantityPerUnit", DbType := "NVarChar(20)")> _
		Public Property QuantityPerUnit() As String
			Get
				Return Me._QuantityPerUnit
			End Get
			Set(ByVal value As String)
				If (Me._QuantityPerUnit <> value) Then
					Me.OnQuantityPerUnitChanging(value)
					Me.SendPropertyChanging()
					Me._QuantityPerUnit = value
					Me.SendPropertyChanged("QuantityPerUnit")
					Me.OnQuantityPerUnitChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_UnitPrice", DbType := "SmallMoney")> _
		Public Property UnitPrice() As Decimal?
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._UnitPrice.Equals(value)) Then
					Me.OnUnitPriceChanging(value)
					Me.SendPropertyChanging()
					Me._UnitPrice = value
					Me.SendPropertyChanged("UnitPrice")
					Me.OnUnitPriceChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_UnitsInStock", DbType := "SmallInt")> _
		Public Property UnitsInStock() As Short?
			Get
				Return Me._UnitsInStock
			End Get
			Set(ByVal value? As Short)
				If (Not Me._UnitsInStock.Equals(value)) Then
					Me.OnUnitsInStockChanging(value)
					Me.SendPropertyChanging()
					Me._UnitsInStock = value
					Me.SendPropertyChanged("UnitsInStock")
					Me.OnUnitsInStockChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_UnitsOnOrder", DbType := "SmallInt")> _
		Public Property UnitsOnOrder() As Short?
			Get
				Return Me._UnitsOnOrder
			End Get
			Set(ByVal value? As Short)
				If (Not Me._UnitsOnOrder.Equals(value)) Then
					Me.OnUnitsOnOrderChanging(value)
					Me.SendPropertyChanging()
					Me._UnitsOnOrder = value
					Me.SendPropertyChanged("UnitsOnOrder")
					Me.OnUnitsOnOrderChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_ReorderLevel", DbType := "SmallInt")> _
		Public Property ReorderLevel() As Short?
			Get
				Return Me._ReorderLevel
			End Get
			Set(ByVal value? As Short)
				If (Not Me._ReorderLevel.Equals(value)) Then
					Me.OnReorderLevelChanging(value)
					Me.SendPropertyChanging()
					Me._ReorderLevel = value
					Me.SendPropertyChanged("ReorderLevel")
					Me.OnReorderLevelChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_Discontinued", DbType := "Bit NOT NULL")> _
		Public Property Discontinued() As Boolean
			Get
				Return Me._Discontinued
			End Get
			Set(ByVal value As Boolean)
				If (Me._Discontinued <> value) Then
					Me.OnDiscontinuedChanging(value)
					Me.SendPropertyChanging()
					Me._Discontinued = value
					Me.SendPropertyChanged("Discontinued")
					Me.OnDiscontinuedChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage := "_EAN13", DbType := "Text", UpdateCheck := UpdateCheck.Never)> _
		Public Property EAN13() As String
			Get
				Return Me._EAN13
			End Get
			Set(ByVal value As String)
				If (Me._EAN13 <> value) Then
					Me.OnEAN13Changing(value)
					Me.SendPropertyChanging()
					Me._EAN13 = value
					Me.SendPropertyChanged("EAN13")
					Me.OnEAN13Changed()
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
